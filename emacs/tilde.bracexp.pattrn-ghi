   Tilde expansion
     Tilde expansion, which is done in parallel with parameter substitution,
     is done on words starting with an unquoted ~.  The characters following
     the tilde, up to the first /, if any, are assumed to be a login name.
     If the login name is empty, +, or -, the value of the HOME, PWD, or
     OLDPWD parameter is substituted, respectively.  Otherwise, the password
     file is searched for the login name, and the tilde expression is
     substituted with the user's home directory.  If the login name is not
     found in the password file or if any quoting or parameter substitution
     occurs in the login name, no substitution is performed.

     In parameter assignments (such as those preceding a simple-command or
     those occurring in the arguments of alias, export, readonly, and
     typeset), tilde expansion is done after any assignment (i.e. after the
     equals sign) or after an unquoted colon (:); login names are also
     delimited by colons.

     The home directory of previously expanded login names are cached and re-
     used.  The alias -d command may be used to list, change, and add to this
     cache (e.g. alias -d fac=/usr/local/facilities; cd ~fac/bin).

   Brace expansion (alternation)
     Brace expressions take the following form:

	   prefix{str1,...,
	   strN}suffix

     The expressions are expanded to N words, each of which is the
     concatenation of prefix, stri, and suffix (e.g. a{c,b{X,Y},d}e expands
     to four words: ace, abXe, abYe, and ade).	As noted in the
     example, brace expressions can be nested and the resulting words are not
     sorted.  Brace expressions must contain an unquoted comma (,) for
     expansion to occur (e.g. {} and {foo} are not expanded).  Brace expansion
     is carried out after parameter substitution and before file name
     generation.

   File name patterns
     A file name pattern is a word containing one or more unquoted ?, *,
     +, @, or ! characters or [..] sequences.  Once brace expansion
     has been performed, the shell replaces file name patterns with the sorted
     names of all the files that match the pattern (if no files match, the
     word is left unchanged).  The pattern elements have the following
     meaning:

     ?	     Matches any single character.

     *	     Matches any sequence of characters.

     [..]    Matches any of the characters inside the brackets.	 Ranges of
	     characters can be specified by separating two characters by a -
	     (e.g. [a0-9] matches the letter a or any digit).  In order to
	     represent itself, a - must either be quoted or the first or
	     last character in the character list.  Similarly, a ] must be
	     quoted or the first character in the list if it is to represent
	     itself instead of the end of the list.  Also, a ! appearing at
	     the start of the list has special meaning (see below), so to
	     represent itself it must be quoted or appear later in the list.

	     Within a bracket expression, the name of a character class
	     enclosed in [: and :] stands for the list of all characters
	     belonging to that class.  Supported character classes:

		   alnum   cntrl   lower   space
		   alpha   digit   print   upper
		   blank   graph   punct   xdigit

	     These match characters using the macros specified in isalnum(3),
	     isalpha(3), and so on.  A character class may not be used as an
	     endpoint of a range.

     [!..]   Like [..], except it matches any character not inside the
	     brackets.

     *(pattern|...|pattern)
	     Matches any string of characters that matches zero or more
	     occurrences of the specified patterns.  Example: The pattern
	     *(foo|bar) matches the strings , foo, bar, foobarfoo,
	     etc.

     +(pattern|...|pattern)
	     Matches any string of characters that matches one or more
	     occurrences of the specified patterns.  Example: The pattern
	     +(foo|bar) matches the strings foo, bar, foobar, etc.

     ?(pattern|...|pattern)
	     Matches the empty string or a string that matches one of the
	     specified patterns.  Example: The pattern ?(foo|bar) only matches
	     the strings , foo, and bar.

     @(pattern|...|pattern)
	     Matches a string that matches one of the specified patterns.
	     Example: The pattern @(foo|bar) only matches the strings foo
	     and bar.

     !(pattern|...|pattern)
	     Matches any string that does not match one of the specified
	     patterns.	Examples: The pattern !(foo|bar) matches all strings
	     except foo and bar; the pattern !(*) matches no strings; the
	     pattern !(?)* matches all strings (think about it).

     Unlike most shells, ksh never matches . and ...

     Note that none of the above pattern elements match either a period (.)
     at the start of a file name or a slash (/), even if they are explicitly
     used in a [..] sequence; also, the names . and .. are never matched,
     even by the pattern .*.

     If the markdirs option is set, any directories that result from file name
     generation are marked with a trailing /.

